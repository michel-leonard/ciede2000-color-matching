name: bc CIEDE2000 Testing (arbitrary prec.)

# During summer 2025, this workflow was tested on several weekends and completed successfully in 83 seconds.

on:
  schedule:
    - cron: '42 2 2,16 * *'
  workflow_dispatch:

env:
  description: "Automated Testing — Michel Leonard implements the CIE2000 color difference formula in bc and Julia"
  related_url_1: "https://github.com/michel-leonard/ciede2000-color-matching/tree/main/tests/bc"
  related_url_2: "https://github.com/michel-leonard/ciede2000-color-matching/tree/main/tests/jl"
  n_csv_lines: 100000
  decimal_digits: 30

jobs:
  test-implementation-de00-bc-arbitrary:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: 📂 For each step below, a new shell will be started at the repository root
        uses: actions/checkout@v5

      - name: 👉 Disable the user manual database, which is not needed in this CI/CD workflow
        run: sudo ln --backup --symbolic --verbose $(which true) $(which mandb)

      - name: 👉 Set up a less crowded server for the APT package manager (step disabled, but useful when an installation is slow)
        run: true || grep -Flr '.ubuntu.com' /etc/apt | xargs sudo sed -i 's|[^/]\+ubuntu.com|mirrors.maine.edu|g'

      - name: 📦 Set up Julia, bc and GCC
        run: |
          if ! command -v julia > /dev/null; then
            ########################################################################################
            ####  STEP 1:            Download & Extract the latest version of Julia             ####
            ########################################################################################
            URL=$(wget --no-verbose --no-check-certificate --timeout=5 --tries=2 "https://julialang.org/downloads/" -O- |
              grep 'linux/x64' | grep '\.tar\.gz' | grep -o 'https://[^"]*' | head -n 1)
            if [ -z "$URL" ]; then
              URL="https://julialang-s3.julialang.org/bin/linux/x64/1.11/julia-1.11.5-linux-x86_64.tar.gz"
            fi
            echo "Download Julia from $URL" && sudo rm -rf /opt/julia && mkdir /opt/julia
            wget --no-verbose --no-check-certificate --timeout=5 --tries=2 "$URL" -O- | tar -xz --strip-components=1 -C /opt/julia
            ########################################################################################
            ####  STEP 2:                       Add Julia to System PATH                        ####
            ########################################################################################
            sudo ln --backup --symbolic --verbose /opt/julia/bin/julia /usr/local/bin/julia
            ########################################################################################
            ####  CONCLUSION:                    Julia Installed in Under 15s                   ####
            ########################################################################################
          fi
          julia --version
          command -v bc > /dev/null || { sudo apt-get update --allow-unauthenticated && sudo apt-get install --allow-unauthenticated --no-install-recommends --assume-yes bc ; }
          command -v gcc > /dev/null || { sudo apt-get update --allow-unauthenticated && sudo apt-get install --allow-unauthenticated --no-install-recommends --assume-yes gcc ; }

      - name: ⚙️ Compile the CIEDE2000 driver program in C99
        run: gcc --version && gcc -std=c99 -Wall -pedantic -O2 -g tests/c/ciede-2000-driver.c -o ciede-2000-driver -lm

      - name: 📑 Display help for the authoritative test software
        run: ./ciede-2000-driver --help

      - name: 🎨 Generate ΔE2000 color difference test cases
        run: |
          # Splits the large file into as many smaller files as there are vCPUs
          n_cpu=$(nproc) && ./ciede-2000-driver --rand-seed $(date +'%Y%V') --generate $n_csv_lines |
          split --unbuffered --lines=$(( ($n_csv_lines + $n_cpu - 1) / $n_cpu )) --numeric-suffixes=1 --additional-suffix=.csv - test-cases-
          # Shows the name, size and first line of newly created files
          du -h test-cases-* | awk '{getline line < $2; print $2, "(" $1 "B) contains L*a*b* color pairs for vCPU " NR ", first values =", line}'

      - name: ⚡ Solves test cases in parallel, calculating ΔE2000 with high-precision in bc (Basic Calculator)
        run: |
          bc --version
          # Prevent line breaks in bc output.
          export BC_LINE_LENGTH=0
          for file in test-cases-*; do
              awk -F ',' '                                                   \
              BEGIN {                                                        \
                  # Define the scale                                         \
                  print "scale=" int(1.5 * '$decimal_digits');               \
                  # Includes the ciede-2000.bc file                          \
                  while ((getline line < "ciede-2000.bc") > 0) print line;   \
              } {                                                            \
                  # Convert CSV lines into bc input format                   \
                  gsub(/[eE]/, "*10^", $0);                                  \
                  printf("ciede_2000(%s)\n", $0);                            \
              }' $file | bc -ql | paste -d ',' $file - > solved-$file &
              echo "Processes $file ($(wc -l < $file) lines) in parallel ➤ solved-$file"
          done
          wait

      - name: 🚀 Check that Julia’s generic high-precision calculations matches bc’s
        run: cat solved-* | julia tests/jl/ciede-2000-driver.jl --tolerance 1e-$decimal_digits > summary.txt

      - name: 🔍 Display verification output
        run: cat summary.txt

      - name: 🏁 Conclusion
        run: |
          if grep -q "Errors : 0" summary.txt && grep -q "Successes : $n_csv_lines" summary.txt; then
            echo "✔️ Verification successful: all $n_csv_lines color differences were correctly calculated."
          else
            echo "❌ Verification failed. See above for details."
            exit 1
          fi
