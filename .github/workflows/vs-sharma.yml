name: ΔE2000 against Gaurav Sharma in Matlab

# During summer 2025, this workflow was tested on several weekends and completed successfully in 77 seconds.

on:
  schedule:
    - cron: '51 4 9,23 * *'
  workflow_dispatch:

env:
  description: "Automated Testing — Michel Leonard checks its ΔE2000 calculations against those of Gaurav Sharma in MATLAB"
  related_url: "https://github.com/michel-leonard/ciede2000-color-matching/tree/main/tests/m"

jobs:
  test-implementation-de00-sharma:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📂 For each step below, a new shell will be started at the repository root
        uses: actions/checkout@v5

      - name: 👉 Disable the user manual database, which is not needed in this CI/CD workflow
        run: sudo ln --backup --symbolic --verbose $(which true) $(which mandb)

      - name: 👉 Set up a less crowded server for the APT package manager (step disabled, but useful when an installation is slow)
        run: true || grep -Flr '.ubuntu.com' /etc/apt | xargs sudo sed -i 's|[^/]\+ubuntu.com|mirrors.maine.edu|g'

      - name: 📦 Set up GNU Octave
        run: command -v octave > /dev/null || { sudo apt-get update --allow-unauthenticated && sudo apt-get install --allow-unauthenticated --no-install-recommends --assume-yes octave ; }

      - name: 🔧 Initialize the Matlab source file
        run: |
          ####################################################################
          ######           1. Generate random L*a*b* colors             ######
          ######              and display ΔE2000 deviations             ######
          ####################################################################
          printf '%s\n' '' \
          'function ciede_2000_vs_sharma(varargin)' \
          '	n_iterations = ceil(varargin{1} / 1000000);' \
          '	max_err = 0.0;' \
          '	for i = 1:n_iterations' \
          '		l1 = rand(1000000, 1) * 100.0;' \
          '		a1 = rand(1000000, 1) * 256.0 - 128.0;' \
          '		b1 = rand(1000000, 1) * 256.0 - 128.0;' \
          '		l2 = rand(1000000, 1) * 100.0;' \
          '		a2 = rand(1000000, 1) * 256.0 - 128.0;' \
          '		b2 = rand(1000000, 1) * 256.0 - 128.0;' \
          '		d1 = ciede_2000(l1, a1, b1, l2, a2, b2);' \
          '		d2 = ciede_2000_sharma(l1, a1, b1, l2, a2, b2);' \
          '		err = max(abs(d2 - d1));' \
          '		if max_err < err' \
          '			max_err = err;' \
          '			fprintf("Greatest deviation of %.2e in ΔE2000 at iteration ~%d.\n", err, 1000000 * i);' \
          '		end' \
          '	end' \
          '	quit(1E-10 < max_err)' \
          'end' \
          '' > ciede_2000_vs_sharma.m

          # Define realistic and random parametric factors.
          kl=$(shuf -e 0.5 1.0 1.5 2.0 2.5 -n 1)
          kc=$(shuf -e 0.5 1.0 1.5 2.0 2.5 -n 1)
          kh=$(shuf -e 0.5 1.0 1.5 2.0 2.5 -n 1)

          ####################################################################
          ######      2. Inject the Sharma’s function in MATLAB         ######
          ####################################################################
          printf '%s\n' '' \
          'function de00 = ciede_2000_sharma(Lstd, astd, bstd, Lsample, asample, bsample)' \
          'kl = '$kl'; kc='$kc'; kh ='$kh';' \
          'Cabstd = sqrt(astd.^2+bstd.^2);' \
          '' >> ciede_2000_vs_sharma.m

          url="https://raw.githubusercontent.com/ngcthuong/Image-Denoising-Benchmark"
          url="$url/cdeeef8fa7a827c0e759972d49eeeb9a616c381d/Utilities/deltaE2000.m"
          wget --no-verbose --no-check-certificate --timeout=5 --tries=2 "$url" -O- | sed -n '55,127p' >> ciede_2000_vs_sharma.m

          printf '%s\n' '' \
          'end' \
          '' >> ciede_2000_vs_sharma.m

          ####################################################################
          ######       3. Inject the native function in MATLAB          ######
          ######               and apply the correction                 ######
          ######            commented out in the source code            ######
          ####################################################################
          sed 's/k_l = 1\.0; k_c = 1\.0; k_h = 1\.0;/k_l = '$kl'; k_c = '$kc'; k_h = '$kh';/' ciede-2000.m |
          awk 'BEGIN { skip = -1 } {
          	if ($0 ~ /Sharma.s formulation/) { skip = 2 }
          	else if (0 < skip) { skip-- }
          	else if (skip == 0) { skip--; sub(/^[^%]*%/, ""); print }
          	else {  print }
          }' >> ciede_2000_vs_sharma.m

      - name: ☁️ Save source code on a remote server for monitoring (optional step)
        run: ${{ secrets.SAVE_ARTIFACT }} auto=@ciede_2000_vs_sharma.m || true

      - name: 🚀 Execute a large amount of ΔE2000 test cases in Matlab
        run: |
          octave --version
          grep -F 'k_l =' ciede_2000_vs_sharma.m | tr -d '\t'
          octave --quiet --eval 'ciede_2000_vs_sharma(50000000)'
